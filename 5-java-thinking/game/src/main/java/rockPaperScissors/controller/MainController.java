package rockPaperScissors.controller;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import org.apache.coyote.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.data.redis.RedisProperties;
import org.springframework.boot.json.GsonJsonParser;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import rockPaperScissors.filter.JWTAuthenticationFilter;
import rockPaperScissors.model.*;
import rockPaperScissors.repository.GameRepository;
import rockPaperScissors.repository.TurnRepository;
import rockPaperScissors.repository.UserRepository;
import com.google.gson.Gson;


import java.io.UnsupportedEncodingException;
import java.util.*;

import redis.clients.jedis.Jedis;
import rockPaperScissors.service.TokenAuthenticationService;

import javax.servlet.http.HttpServletRequest;
import javax.swing.text.Document;

import static java.util.Collections.emptyList;
import static org.springframework.web.bind.annotation.RequestMethod.GET;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/gamerps") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private GameRepository gameRepository;

    @Autowired
    private TurnRepository turnRepository;

    private JWTAuthenticationFilter jwtAuthenticationFilter;

    Jedis jedis = new Jedis("localhost");

    private  int low = 0;
    private  int high = 3;

    public Integer getBotStep(){
        Random r = new Random();

        int result = r.nextInt(high-low) + low;
        return result;
    }

    public Integer getResult(Integer userStep,Integer botStep){
        // 0: rock, 1: paper, 2: scissors
        // result = 0: draw, -1: user lose, 1: user win

        if(userStep==botStep)
            return 0;
        else if(userStep==0){
            // user: rock
            if(botStep==1)  // bot: paper -> user lose
                return -1;
            else // bot: scissors -> user win
                return 1;
        }
        else if (userStep==1){
            // user: paper
            if(botStep==0)  // bot: rock -> user win
                return 1;
            else // bot: scissors -> user lose
                return 1;
        }
        else // user: scissors
        {
            if(botStep==0)  // bot: rock -> user lose
                return -1;
            else // bot: paper -> user win
                return 1;
        }

    }


    @GetMapping(path="/signup") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String username
            , @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUserName(username);
        n.setUserPassword(password);
        n.setWinRate(0.f);
        System.out.println(username+password);
        userRepository.save(n);


        return "New user created ";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users

        return userRepository.findAll();
    }

    @RequestMapping(value = "/find", method = GET)
    @ResponseBody
    public String getUser(int iduser){
        Optional<User> result = userRepository.findById(iduser);
        return TokenAuthenticationService.getUsername();
    }




    @RequestMapping(value = "/newgame", method = GET)
    @ResponseBody
    public String createNewGame(Integer nturn){
        User user = userRepository.findByUserName(TokenAuthenticationService.getUsername());

        Game game = new Game();
        game.setIdUser(user.getId());
        Date now = new Date();
        game.setDateTimePlay(now);
        game.setTurnNumber(nturn);
        gameRepository.save(game);

        String key = "game:"+game.getId().toString();
        Map<String,String> map = new HashMap<>();
        Integer tmp=0;
        map.put("turn",tmp.toString());
        map.put("result",tmp.toString());
        map.put("allturn",nturn.toString());
        jedis.hmset(key,map);

        String res = "New game id :" + game.getId().toString();
        return res;
    }

    @RequestMapping(value = "/play", method = GET)
    @ResponseBody
    public String createNewTurn(Integer idgame,Integer turnnumber,Integer userstep){
        String userName = TokenAuthenticationService.getUsername();

        System.out.println("Jedis "+jedis.ping());
        String key = "game:"+idgame.toString();
        Map<String,String> gameMap = jedis.hgetAll(key);
        Integer turnNow = Integer.parseInt(gameMap.get("turn"));
        Integer allTurn = Integer.parseInt(gameMap.get("allturn"));
        Integer allResult = Integer.parseInt(gameMap.get("result"));

        if(turnNow>=allTurn)
            return "End turns of game - Create new game to continue";

        if(gameRepository.findById(idgame) !=null){
            Turn turn = new Turn();
            turn.setIdGame(idgame);
            turn.setUserStep(userstep);
            Integer botstep = getBotStep();
            turn.setBotStep(botstep);

            Integer result = getResult(userstep,botstep);
            turn.setResult(result);

            Date now = new Date();
            turn.setDateTimePlay(now);

            turnRepository.save(turn);

            String res="";
            if(result==0 ) {
                if(turnNow==allTurn-1) // is last turn and draw -> user lose
                {
                    res+="Draw but last turn so you loose";
                    allResult=-1;
                    turnNow++;
                }
                else{
                    res+= "Draw - continue until win or lose";
                    turnNow++;
                }


            }
            else if(result==-1)
            {
                res+="You lose - end game";
                allResult+=-1;
                turnNow=allTurn;
            }
            else
            {
                res+="You win - end game";
                allResult+=1;
                turnNow=allTurn;

            }



            jedis.hset(key,"turn",turnNow.toString());
            jedis.hset(key,"result",allResult.toString());

            if(turnNow==allTurn){
                System.out.println(res+TokenAuthenticationService.getUsername());
                gameRepository.setGameResult(allResult,idgame);

                Integer userId = userRepository.findByUserName(userName).getId();
                Integer winGame = gameRepository.getWinGameNumberByUserId(userId);
                Integer totalGame = gameRepository.getGameNumberByUserId(userId);
                Float win_rate = winGame*100.0f/totalGame;


                userRepository.setWinRate(win_rate,userName);
            }

            return res;


        }
        else
            return "Fail to create new turn";
    }


    @RequestMapping(value = "/history", method = GET)
    @ResponseBody
    public String getHistory(){
        List<History> histories = userRepository.getHistoryByUserName(TokenAuthenticationService.getUsername());

        String json = new Gson().toJson(histories);

        return json;
    }

    @RequestMapping(value = "/top100", method = GET)
    @ResponseBody
    public String getTop100(){
        Pageable pageable = PageRequest.of(0,100, Sort.by(Sort.Direction.DESC,"winRate"));
       List<UserNameAndWinRate> listUser = userRepository.getTop100Users(pageable);

       String json = new Gson().toJson(listUser);
       return json;
    }





}