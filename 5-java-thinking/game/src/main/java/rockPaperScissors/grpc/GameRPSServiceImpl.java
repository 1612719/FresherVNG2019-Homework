package rockPaperScissors.grpc;

import com.rockPaperScissors.grpc.gamerps.*;
import org.lognet.springboot.grpc.GRpcService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.grpc.stub.StreamObserver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.http.ResponseEntity;
import redis.clients.jedis.Jedis;
import rockPaperScissors.controller.MainController;
import rockPaperScissors.filter.JWTAuthenticationFilter;
import rockPaperScissors.model.*;
import rockPaperScissors.repository.GameRepository;
import rockPaperScissors.repository.TurnRepository;
import rockPaperScissors.repository.UserRepository;
import rockPaperScissors.service.TokenAuthenticationService;
import rockPaperScissors.controller.HTTPController;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@GRpcService
public class GameRPSServiceImpl
        extends GameRPSGrpc.GameRPSImplBase {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private GameRepository gameRepository;

    @Autowired
    private TurnRepository turnRepository;

    private JWTAuthenticationFilter jwtAuthenticationFilter;

    Jedis jedis = new Jedis("localhost");
    private MainController mainController = new MainController();


    private static final Logger LOGGER =
            LoggerFactory.getLogger(GameRPSServiceImpl.class);

//    @Override
//    public void sayHello(Person request,
//                         StreamObserver<Greeting> responseObserver) {
//        LOGGER.info("server received {}", request);
//
//        String message = "Hello " + request.getFirstName() + " "
//                + request.getLastName() + "!";
//        Greeting greeting =
//                Greeting.newBuilder().setMessage(message).build();
//        LOGGER.info("server responded {}", greeting);
//
//        responseObserver.onNext(greeting);
//        responseObserver.onCompleted();
//    }

    @Override
    public void loginUser(UserRequest request,
                          StreamObserver<LoginResponse> responseObserver) {
        TokenAuthenticationService tokenAuthenticationService;

        LOGGER.info("server received login {}", request);


        User user = new User();
        user.setUserName(request.getUserName());
        user.setUserPassword(request.getUserPassword());

        LoginResponse loginResponse;
        String message;


        Example<User> userExample = Example.of(user);
        if(userRepository.findByUserName(user.getUserName())!=null){
            TokenMessage tokenMessage = TokenMessage.newBuilder().setToken(TokenAuthenticationService.addAuthentication(user.getUserName())).build();
            message = "Login success ";
            loginResponse =
                    LoginResponse.newBuilder().setStatus(200).setMessage(message).setToken(tokenMessage).build();
        }
        else {
            message = "Username or password is not correst";
            loginResponse =
                    LoginResponse.newBuilder().setStatus(404).setMessage(message).build();
        }

        LOGGER.info("server responded {}", loginResponse);

        responseObserver.onNext(loginResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void signupUser(UserRequest request,
                         StreamObserver<com.rockPaperScissors.grpc.gamerps.SignupResponse> responseObserver) {

        ResponseEntity<String> responseEntity = mainController.addNewUser(request.getUserName(),request.getUserPassword(),userRepository);
        String message = responseEntity.getBody();
        SignupResponse signupResponse =
                SignupResponse.newBuilder().setStatus(responseEntity.getStatusCodeValue()).setMessage(message).build();

        responseObserver.onNext(signupResponse);
        responseObserver.onCompleted();

    }



    @Override
    public void newGame(NewGameRequest request,
                        StreamObserver<com.rockPaperScissors.grpc.gamerps.NewGameResponse> responseObserver) {
        String tokenMessage = request.getToken().getToken();
        String userName = TokenAuthenticationService.getUsername(tokenMessage);
        ResponseEntity<String> responseEntity=mainController.createNewGame(userName,userRepository,gameRepository);
        String message = responseEntity.getBody();
        System.out.println("cre "+message);
        Integer idGame = Integer.parseInt(message.split(":")[1]);
        NewGameResponse newGameResponse = NewGameResponse.newBuilder().setStatus(responseEntity.getStatusCodeValue()).setId(idGame).setMessage(message).build();

        responseObserver.onNext(newGameResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void playTurn(com.rockPaperScissors.grpc.gamerps.TurnRequest request,
                         io.grpc.stub.StreamObserver<com.rockPaperScissors.grpc.gamerps.TurnResponse> responseObserver) {
        Integer idgame = request.getIdGame();
        Integer userstep = request.getUserStep();
        String tokenMessage = request.getToken().getToken();
        String userName = TokenAuthenticationService.getUsername(tokenMessage);

        System.out.println("id game "+idgame.toString()+userstep.toString());

        ResponseEntity<String> responseEntity = mainController.createNewTurn(idgame,userstep,userName,userRepository,gameRepository,turnRepository);
        String message = responseEntity.getBody();

        TurnResponse turnResponse = TurnResponse.newBuilder().setStatus(responseEntity.getStatusCodeValue()).setMessage(message).build();
        responseObserver.onNext(turnResponse);
        responseObserver.onCompleted();


    }


    public void getHistory(com.rockPaperScissors.grpc.gamerps.InforRequest request,
                           io.grpc.stub.StreamObserver<com.rockPaperScissors.grpc.gamerps.HistoryResponse> responseObserver) {
        String tokenMessage = request.getToken().getToken();
        String userName = TokenAuthenticationService.getUsername(tokenMessage);
        ResponseEntity<List<Game>> responseEntity = mainController.getHistory(userName,userRepository,gameRepository);
        List<Game> games = responseEntity.getBody();

        HistoryResponse.Builder historyBuilder = HistoryResponse.newBuilder().setStatus(responseEntity.getStatusCodeValue());


        if(games !=null){
            for(Game game : games){
                    Set<Turn> turns = game.getTurns();
                    GameDetail.Builder gameDetail = GameDetail.newBuilder();
                    gameDetail.setId(game.getId())
                            .setResult(game.getResult())
                            .setDateTimePlay(game.getDateTimePlay().toString());

                    for(Turn turn: turns){
                        TurnDetail.Builder turnDetail = TurnDetail.newBuilder()
                                .setId(turn.getId())
                                .setBotStep(turn.getBotStep())
                                .setUserStep(turn.getUserStep())
                                .setResult(turn.getResult())
                                .setDateTimePlay(turn.getDateTimePlay().toString());
                        gameDetail.addTurnDetails(turnDetail);
                    }
                    historyBuilder.setMessage("History").addGameDetails(gameDetail);



            }

        }

        responseObserver.onNext(historyBuilder.build());
        responseObserver.onCompleted();
    }

    @Override
    public void getTop100(com.rockPaperScissors.grpc.gamerps.InforRequest request,
                          io.grpc.stub.StreamObserver<com.rockPaperScissors.grpc.gamerps.Top100Reponse> responseObserver) {
        String tokenMessage = request.getToken().getToken();
        String userName = TokenAuthenticationService.getUsername(tokenMessage);

        ResponseEntity<List<UserNameAndWinRate>> responseEntity = mainController.getTop100(userName,userRepository);
        List<UserNameAndWinRate> userNameAndWinRates = responseEntity.getBody();

        Top100Reponse.Builder top100Builder = Top100Reponse.newBuilder().setStatus(responseEntity.getStatusCodeValue());

        for(UserNameAndWinRate userNameAndWinRate:userNameAndWinRates){
            UserRate.Builder userRateBuilder = UserRate.newBuilder()
                                                .setUsername(userNameAndWinRate.getUserName())
                                                .setWinRate(userNameAndWinRate.getWinRate());
            top100Builder.addUserRates(userRateBuilder);
        }

        top100Builder.setMessage("Top 100 users rate");

        responseObserver.onNext(top100Builder.build());
        responseObserver.onCompleted();

    }



}